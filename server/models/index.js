const path = require('path');
const fs = require('fs');
const bcrypt = require('bcryptjs');
const { Sequelize, DataTypes } = require('sequelize');
const { sequelize } = require('../config/db');

const basename = path.basename(__filename);
const db = {};

// Kh·ªüi t·∫°o sequelize instance
const sequelizeInstance = sequelize;

// H√†m t·∫°o t√†i kho·∫£n admin m·∫∑c ƒë·ªãnh
const createDefaultAdmin = async (userModel) => {
  try {
    if (!userModel) return;

    const admin = await userModel.findOne({ where: { username: 'admin' } });
    if (!admin) {
      // T·∫°o m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c hash
      const salt = await bcrypt.genSalt(10);
      const hashedPassword = await bcrypt.hash('admin123', salt);

      await userModel.create({
        username: 'admin',
        full_name: 'Qu·∫£n tr·ªã vi√™n',
        password: hashedPassword,
        role: 'admin',
        is_active: true,
      });
      console.log('‚úÖ ƒê√£ t·∫°o t√†i kho·∫£n admin m·∫∑c ƒë·ªãnh');
      console.log('üë§ T√™n ƒëƒÉng nh·∫≠p: admin');
      console.log('üîë M·∫≠t kh·∫©u: admin123');
    } else {
      console.log('‚ÑπÔ∏è T√†i kho·∫£n admin ƒë√£ t·ªìn t·∫°i');
    }
  } catch (error) {
    console.error('‚ùå L·ªói khi t·∫°o t√†i kho·∫£n admin m·∫∑c ƒë·ªãnh:', error);
  }
};

// ƒê·ªçc t·∫•t c·∫£ c√°c file model trong th∆∞ m·ª•c hi·ªán t·∫°i
fs.readdirSync(__dirname)
  .filter((file) => {
    const isJsFile = file.endsWith('.js');
    const isNotTestFile = !file.endsWith('.test.js');
    const isNotIndex = file !== basename;
    const isNotHidden = !file.startsWith('.');

    return isJsFile && isNotTestFile && isNotIndex && isNotHidden;
  })
  .forEach((file) => {
    try {
      // S·ª≠ d·ª•ng dynamic import thay v√¨ require
      const modelPath = path.join(__dirname, file);
      // eslint-disable-next-line import/no-dynamic-require, global-require
      const model = require(modelPath)(sequelizeInstance, DataTypes);
      db[model.name] = model;
      console.log(`‚úÖ ƒê√£ t·∫£i model: ${model.name}`);
    } catch (error) {
      console.error(`‚ùå L·ªói khi t·∫£i model t·ª´ file ${file}:`, error);
    }
  });

// Thi·∫øt l·∫≠p quan h·ªá gi·ªØa c√°c model
Object.keys(db).forEach((modelName) => {
  if (db[modelName].associate) {
    db[modelName].associate(db);
  }
});

// Th√™m c√°c model v√†o ƒë·ªëi t∆∞·ª£ng db
db.sequelize = sequelizeInstance;
db.Sequelize = Sequelize;

// ƒê·ªìng b·ªô h√≥a c∆° s·ªü d·ªØ li·ªáu
const syncDb = async (force = false) => {
  try {
    // T·∫°o b·∫£ng n·∫øu ch∆∞a t·ªìn t·∫°i
    await sequelizeInstance.sync({ force });

    // T·∫°o t√†i kho·∫£n admin m·∫∑c ƒë·ªãnh n·∫øu c√≥ model User
    if (db.User) {
      await createDefaultAdmin(db.User);
    }

    console.log('‚úÖ Database synchronized successfully');
    return true;
  } catch (error) {
    console.error('‚ùå Error synchronizing database:', error);
    throw error;
  }
};

// Th√™m h√†m syncDb v√†o ƒë·ªëi t∆∞·ª£ng db
db.syncDb = syncDb;

module.exports = db;
